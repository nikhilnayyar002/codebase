#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('init:server');
var http = require('http');
var socket = require('socket.io');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
/**
 *  socket connections
 */

//in memory data
var globalHTML = null;
var globalText = '';
var globalSVG = null;
globalPathsID=0;

// socket
var io = socket(server);
io.on('connection', (socket) => {

    // Handle chat event
    socket.on('chat', function (data) {
        // console.log(data);
        io.sockets.emit('chat', data);
    });

    // Handle typing event
    socket.on('typing', function (data) {
        socket.broadcast.emit('typing', data);
    });

    //draw
    socket.on('dragged', (data) => {
      socket.broadcast.emit('dragged', data);
    });
    socket.on('dragstart', (data) => {
      socket.broadcast.emit('dragstart', data);
    });
    socket.on('dragend', (data) => {
      socket.broadcast.emit('dragend', data);
    });
    socket.on('undo', (data) => {
      socket.broadcast.emit('undo');
    });
    socket.on('delete-path', (data) => {
      socket.broadcast.emit('delete-path',data);
    });
    socket.on('clear', (data) => {
      globalSVG=null;
      socket.broadcast.emit('clear');
    });
    socket.on('svgdata', (data,id) => {
      globalSVG=data;
      globalPathsID=id;
    });

    if(globalSVG) 
        socket.emit('svgdata',globalSVG,globalPathsID);

    //quill
    socket.on('para', (data)=> {
      socket.broadcast.emit('updated_para', data.delta);
    });
    socket.on('html', (html)=> {
      globalHTML=html;
    });

    if (globalHTML)
        socket.emit('html',globalHTML);

    socket.on('editDoc', text => {
        globalText = text;
        socket.broadcast.emit('doc', text);
    });
    
    io.emit('doc', globalText);
});






